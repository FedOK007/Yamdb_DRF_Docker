name: YamDB-app workflow

on:
  push:
    branches:
      - master
      - main

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.7

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r api_yamdb/requirements.txt

    - name: Test with flake8 and django tests
      run: |
        python -m flake8
        python -m pytest tests
        
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Check out the repo
      # Проверка доступности репозитория Docker Hub для workflow
      uses: actions/checkout@v2
    - name: Set up Docker Buildx
      # Вызов сборщика контейнеров docker
      uses: docker/setup-buildx-action@v1
    - name: Login to Docker
      # Запуск скрипта авторизации на Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push to Docker Hub
      # Пуш образа в Docker Hub 
      uses: docker/build-push-action@v2
      with:
        context: ./api_yamdb/
        push: true
        tags: fedek/api_yamdb:latest
  
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_DEPLOY_HOST }}
          username: ${{ secrets.REMOTE_DEPLOY_USER }}
          key: ${{ secrets.REMOTE_DEPLOY_SSH_KEY }}
          passphrase: ${{ secrets.REMOTE_DEPLOY_PASSPHRASE }}
          script: |
            sudo docker compose stop
            sudo docker compose rm web
            cat > .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo DJANGO_SUPERUSER_USERNAME=${{ secrets.DJANGO_USERNAME }} >> .env
            echo DJANGO_SUPERUSER_EMAIL=${{ secrets.DJANGO_USERNAME_EMAIL }} >> .env
            echo DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_PASSWORD }} >> .env
            sudo docker compose down
            sudo docker compose up -d --build
            sudo docker compose exec web python manage.py migrate
            sudo docker compose exec web python manage.py collectstatic --no-input
#           sudo docker compose exec web python manage.py createsuperuser --noinput
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен! 
  